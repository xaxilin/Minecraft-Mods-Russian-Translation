import os
import json
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests
from collections import defaultdict

# ===== –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö =====
previous_proofread_dates = {}
prev_dates_file = 'previous_proofread_dates.json'
if os.path.exists(prev_dates_file):
    with open(prev_dates_file, 'r', encoding='utf-8') as f:
        previous_proofread_dates = json.load(f)
else:
    print("–§–∞–π–ª previous_proofread_dates.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫.")

# ===== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞ Google –¢–∞–±–ª–∏—Ü–∞—Ö =====
service_account_info = json.loads(os.environ['GOOGLE_SERVICE_ACCOUNT_KEY'])
scopes = ['https://www.googleapis.com/auth/spreadsheets.readonly']
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scopes)
client = gspread.authorize(creds)

sheet_id = '1kGGT2GGdG_Ed13gQfn01tDq2MZlVOC9AoiD1s3SDlZE'
sheet = client.open_by_key(sheet_id)
worksheet = sheet.sheet1
data = worksheet.get_all_records()

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====
mod_lists = defaultdict(list)
current_proofread_dates = {}
for row in data:
    proofread = str(row.get('proofread', '')).strip()
    if proofread and proofread.upper() not in ['', 'FALSE']:
        gameVer = str(row.get('gameVer', '')).strip()
        mod_name = str(row.get('name', '')).strip()
        modrinth_id = str(row.get('modrinthId', '')).strip()
        curseforge_id = str(row.get('curseforgeId', '')).strip()
        fallback_url = str(row.get('fallbackUrl', '')).strip()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        current_proofread_dates[mod_name] = proofread

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–æ–≤—ã–π, –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        prev_proofread_date = previous_proofread_dates.get(mod_name)
        if not prev_proofread_date:
            status = 'new'  # –ù–æ–≤—ã–π –º–æ–¥
        elif prev_proofread_date != proofread:
            status = 'updated'  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–æ–¥
        else:
            status = 'unchanged'  # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥
        mod_url = ''
        if modrinth_id and modrinth_id.upper() != 'FALSE':
            # Modrinth
            response = requests.get(f'https://api.modrinth.com/v2/project/{modrinth_id}')
            if response.status_code == 200:
                mod_data = response.json()
                mod_url = mod_data.get('url', f'https://modrinth.com/mod/{modrinth_id}')
            else:
                mod_url = f'https://modrinth.com/mod/{modrinth_id}'
        elif curseforge_id and curseforge_id.upper() != 'FALSE':
            # CurseForge
            API_KEY = os.environ.get('CF_API_KEY')
            headers = {
                'Accept': 'application/json',
                'x-api-key': API_KEY
            }
            response = requests.get(f'https://api.curseforge.com/v1/mods/{curseforge_id}', headers=headers)
            if response.status_code == 200:
                mod_data = response.json().get('data', {})
                mod_url = mod_data.get('links', {}).get('websiteUrl', f'https://www.curseforge.com/minecraft/mc-mods/{curseforge_id}')
            else:
                mod_url = f'https://www.curseforge.com/minecraft/mc-mods/{curseforge_id}'
        elif fallback_url and fallback_url.upper() != 'FALSE':
            mod_url = fallback_url # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –∏–∑ fallbackUrl
        else:
            mod_url = '' # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –º–æ–¥–∞
        date_str = f'<code>{proofread}</code>'
        mod_link = f'<a href="{mod_url}">{mod_name}</a>' if mod_url else mod_name

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if status == 'new':
            emoji = '‚ûï'
            mod_entry = f'<li><b>{emoji} {mod_link} {date_str}</b></li>'
        elif status == 'updated':
            emoji = '‚úèÔ∏è'
            mod_entry = f'<li><b>{emoji} {mod_link} {date_str}</b></li>'
        else:
            # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            mod_entry = f'<li>{mod_link} {date_str}</li>'

        mod_lists[gameVer].append((proofread, mod_entry))

# ===== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–ª–∞ –≤—ã–ø—É—Å–∫–∞ =====

# –ù–∞—á–∞–ª–æ —Ç–µ–ª–∞ –≤—ã–ø—É—Å–∫–∞
release_body = """–≠—Ç–æ –±–µ—Ç–∞-–≤—ã–ø—É—Å–∫ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∞–ª—å—Ñ–∞-–≤—ã–ø—É—Å–∫–∞, –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–¥–µ—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –≤–∫–ª—é—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã, —á—å—ë –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è. –û–¥–Ω–∞–∫–æ –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ –æ—Ö–≤–∞—á–µ–Ω–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –º–æ–¥–æ–≤, —Å–±–æ—Ä–æ–∫ –º–æ–¥–æ–≤ –∏ –Ω–∞–±–æ—Ä–æ–≤ —à–µ–π–¥–µ—Ä–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–∂–µ.

<details>
    <summary>
        <h3>üî† –ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–µ –º–æ–¥—ã —ç—Ç–æ–≥–æ –≤—ã–ø—É—Å–∫–∞</h3>
    </summary>
    <br>
    <b>–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
    <br><br>
    <ul>
        <li>‚ûï ‚Äî –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥</li>
        <li>‚úèÔ∏è ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–≤–æ–¥–µ</li>
        <li><code>–î–î.–ú–ú.–ì–ì–ì–ì</code> ‚Äî –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è</li>
    </ul>
    <br>
"""

# –î–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã —Å–æ–∑–¥–∞—ë–º —Å–ø–æ–π–ª–µ—Ä
for gameVer, mods in sorted(mod_lists.items(), key=lambda x: x[0]):
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–æ–¥–æ–≤ –≤–Ω—É—Ç—Ä–∏ –≤–µ—Ä—Å–∏–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –≤—ã—à–µ)
    mods.sort(key=lambda x: x[0], reverse=True)
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –¥–ª—è –≤–µ—Ä—Å–∏–∏
    latest_date = max([proofread for proofread, _ in mods])
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –º–æ–¥—ã
    version_status = ''
    for proofread, mod_entry in mods:
        mod_name = re.search(r'>([^<>]+)</a>', mod_entry)
        if mod_name:
            mod_name = mod_name.group(1)
        else:
            mod_name = mod_entry
        prev_date = previous_proofread_dates.get(mod_name)
        if not prev_date or prev_date != proofread:
            if not version_status:
                version_status = '‚úèÔ∏è'
            break

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–æ–π–ª–µ—Ä–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏
    version_header = f'<summary><b>{gameVer}'
    if version_status:
        version_header += f' {version_status}'
    version_header += f' <code>{latest_date}</code></b></summary>'
    release_body += f'    <details>\n        {version_header}\n        <ul>\n'
    for _, mod_entry in mods:
        release_body += f'            {mod_entry}\n'
    release_body += '        </ul>\n    </details>\n'

release_body += '</details>\n\n–≠—Ç–æ—Ç –≤—ã–ø—É—Å–∫ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –Ω–∞ —Ä–µ–ª–∏–∑. –ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º –≤—ã–ø—É—Å–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ issues –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ [–î–µ—Ñ–ª–µ–∫—Ç–µ](https://github.com/RushanM)!'

# ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö =====
with open('current_proofread_dates.json', 'w', encoding='utf-8') as f:
    json.dump(current_proofread_dates, f, ensure_ascii=False, indent=4)

# ===== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è release_body =====
with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_out:
    gh_out.write('release_body<<EOF\n')
    gh_out.write(release_body)
    gh_out.write('\nEOF\n')